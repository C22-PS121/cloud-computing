swagger: "2.0"
# openapi: "3.0.0"
info:
  description: "Dantion Endpoints API."
  title: "Endpoints Dantion"
  version: "1.0.0"
host: "dantion.appspot.com"
consumes:
- "application/json"
produces:
- "application/json"
schemes:
- "https"
- "http"
# securityDefinitions:
#   Bearer:
#     type: apiKey
#     name: Authorization
#     in: header
paths:
  "/users":
    get:
      description: "Get All User"
      operationId: "getuser"
      produces:
      - "application/json"
      responses:
        200:
          description: "get all user"
          schema:
            $ref: "#/definitions/User"
  "/users/{id}":
    get:
      description: "Get User Using ID"
      operationId: "Userid"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user"
        required: true
        type: "string"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success get User"
          schema:
            $ref: "#/definitions/User"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
  "/users/role":
    patch:
      description: "Update User Role"
      operationId: "UserRole"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success update User Role"
          schema:
            $ref: "#/definitions/User"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
  "/users/register":
    post:
      description: "Register User"
      operationId: "registeruser"
      produces:
      - "application/json"
      responses:
        200:
          description: "success register user"
          schema:
            $ref: "#/definitions/User"
  "/users/login":
    post:
      description: "Login User"
      operationId: "loginuser"
      produces:
      - "application/json"
      responses:
        200:
          description: "success login user"
          schema:
            $ref: "#/definitions/User"
  "/detections":
    get:
      description: "Get All Detection"
      operationId: "alldetection"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success get all detection"
          schema:
            $ref: "#/definitions/Detection"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
    post:
      description: "Add Detection"
      operationId: "adddetection"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success add detection"
          schema:
            $ref: "#/definitions/Detection"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
    patch:
      description: "Update Detection"
      operationId: "updatedetection"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success update detection"
          schema:
            $ref: "#/definitions/Detection"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
  "/detections/{id}":
    get:
      description: "Get Detection Using ID"
      operationId: "detectionid"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of detection"
        required: true
        type: "string"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success get detection"
          schema:
            $ref: "#/definitions/Detection"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
    delete:
      description: "Delete Detection ID"
      operationId: "deletedetection"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success delete detection"
          schema:
            $ref: "#/definitions/Detection"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
  "/places":
    get:
      description: "Get All Place"
      operationId: "allPlace"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success get all Place"
          schema:
            $ref: "#/definitions/Place"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
    post:
      description: "Add Place"
      operationId: "addPlace"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success add Place"
          schema:
            $ref: "#/definitions/Place"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
    patch:
      description: "Update Place"
      operationId: "updatePlace"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success update Place"
          schema:
            $ref: "#/definitions/Place"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
  "/places/{id}":
    get:
      description: "Get Place Using ID"
      operationId: "Placeid"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of places"
        required: true
        type: "string"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success get Place"
          schema:
            $ref: "#/definitions/Place"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
    delete:
      description: "Delete Place ID"
      operationId: "deletePlace"
      produces:
      - "application/json"
      # security:
      #   - bearerAuth: []
      responses:
        200:
          description: "success delete Place"
          schema:
            $ref: "#/definitions/Place"
        # 401:
        #   description: "Unauthorized"
        #   schema:
        #     $ref: "#/components/responses/UnauthorizedError"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      number:
        type: "string"
      parentNumber:
        type: "string"
      password:
        type: "string"
        format: "password"
      role:
        type: "string"
        enum:
        - "admin"
        - "polisi"
        - "ambulan"
      photo:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  Detection:
    type: "object"
    properties:
      id:
        type: "string"
      lat:
        type: "number"
        format: "double"
      lon:
        type: "number"
        format: "double"
      recordUrl:
        type: "string"
        format: "binary"
      type:
        type: "string"
        enum:
        - "begal"
        - "kecelakaan"
      isValid:
        type: "boolean"
        default: false
      status:
        type: "string"
        description: "Danger Detection Status"
        enum:
        - "pelapor"
        - "korban"
      userId:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
  Place:
    type: "object"
    properties:
      id:
        type: "string"
      lat:
        type: "number"
        format: "double"
      lon:
        type: "number"
        format: "double"
      radius:
        type: "number"
        format: "double"
      type:
        type: "string"
        enum:
        - "begal"
        - "kecelakaan"
      isValid:
        type: "boolean"
        default: false
      status:
        type: "string"
        description: "Danger Detection Status"
        enum:
        - "pelapor"
        - "korban"
      userId:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
# components:
#   securitySchemes:
#     bearerAuth:
#       type: http
#       scheme: bearer
#       bearerFormat: JWT
#   responses:
#     UnauthorizedError:
#       description: Access token is missing or invalid

# This section requires all requests to any path to require an API key.
security:
- api_key: []
securityDefinitions:
  # This section configures basic authentication with an API key.
  api_key:
    type: "apiKey"
    name: "key"
    in: "query"
  # This section configures authentication using Google API Service Accounts
  # to sign a json web token. This is mostly used for server-to-server
  # communication.
  google_jwt:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # This must match the 'iss' field in the JWT.
    x-google-issuer: "jwt-client.endpoints.sample.google.com"
    # Update this with your service account's email address.
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/jwk/YOUR-SERVICE-ACCOUNT-EMAIL"
  # This section configures authentication using Google OAuth2 ID Tokens.
  # ID Tokens can be obtained using OAuth2 clients, and can be used to access
  # your API on behalf of a particular user.
  google_id_token:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    x-google-issuer: "accounts.google.com"
    x-google-jwks_uri: "https://www.googleapis.com/oauth2/v1/certs"
